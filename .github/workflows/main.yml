name: Continuous Integration and Delivery

on:
  push:
    branches: [dev]

env:
  #
  JOBSPRO_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/jobspro-app
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build the Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: checkout feature/deploy-to-EC2
        uses: actions/checkout@v3

      - name: Set environment variables to .env
        run: |
          echo "JOBSPRO_IMAGE=$(echo ${{env.JOBSPRO_IMAGE}} )" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

      - name: Pull images
        run: |
          docker pull ${{ env.JOBSPRO_IMAGE }} || true
      - name: Build images
        run: |
          docker build -t ${{env.JOBSPRO_IMAGE}} .
      - name: Push images
        run: |
          docker push ${{ env.JOBSPRO_IMAGE }}

  checking-secrets:
    name: Checking secrets
    runs-on: ubuntu-latest
    needs: build
    outputs:
      secret_key_exists: ${{steps.check_secrets.outputs.defined}}
    steps:
      - name: Check for Secrets availabilities
        id: check_secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.PRIVATE_KEY }}" && -n "${{secrets.AWS_EC2_IP_ADDRESS}}" && -n "${{secrets.AWS_HOST_USER}}" ]]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: checking-secrets
    if: needs.checking-secrets.outputs.secret_key_exists == 'true'
    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Add environment variables to .env
        run: |
          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: SSH into EC2 instance and deploy
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -o StrictHostKeyChecking=no -r ./.env "${{secrets.AWS_HOST_USER}}"@"${{secrets.AWS_EC2_IP_ADDRESS}}": || { echo "Error: SCP command failed"; exit 1; }
          ssh -o StrictHostKeyChecking=no ${{secrets.AWS_HOST_USER}}@${{ secrets.AWS_EC2_IP_ADDRESS }} << EOF
              docker rmi -f $(docker image ls -a -q)
              docker image prune -f
              echo "${{secrets.PERSONAL_ACCESS_TOKEN}}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
              docker pull ghcr.io/finclusionapps/jobspro-web-app/jobspro-app:latest
              docker container prune -f
              sudo lsof -t -i:8000 | xargs -r sudo kill -9
              docker rm -f jobsproContainer || true
              docker run --env-file=.env -d -p 8000:80 --name jobsproContainer ghcr.io/finclusionapps/jobspro-web-app/jobspro-app:latest
          EOF