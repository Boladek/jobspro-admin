name: Continuous Integration and Delivery

on:
  push:
    branches: [feature/deploy-to-EC2]

# env:
#   JOBSPRO_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/jobspro"
#   NGINX_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nginx"


jobs:
  build:
    name: Build the Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # - name: Pull images
    #   run: |
    #     docker pull $JOBSPRO_IMAGE || true
    #     docker pull $NGINX_IMAGE || true

    - name: Build images
      run: |
        docker-compose -f docker-compose.ci.yml build

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_JOBS_REPOSITORY: jobspro
        ECR_NGINX_REPOSITORY: nginx
      run: |
        docker build -t $ECR_REGISTRY/$EECR_JOBS_REPOSITORY:latest .
        docker build -t $ECR_REGISTRY/$EECR_NGINX_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$EECR_JOBS_REPOSITORY:latest
        docker push $ECR_REGISTRY/$EECR_NGINX_REPOSITORY:latest

    # - name: Tag images
    #   run: |
    #     docker tag $JOBSPRO_IMAGE ${JOBSPRO_IMAGE}:latest
    #     docker tag $NGINX_IMAGE ${NGINX_IMAGE}:latest

    # - name: Push images to ECR
    #   run: |
    #     docker push $JOBSPRO_IMAGE:latest
    #     docker push $NGINX_IMAGE:latest

  checking-secrets:
    name: Checking secrets
    runs-on: ubuntu-latest
    needs: build
    outputs:
      secret_key_exists: ${{ steps.check_secrets.outputs.defined }}
    steps:
      - name: Check for Secrets availabilities
        id: check_secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.PRIVATE_KEY }}" && -n "${{ secrets.AWS_EC2_IP_ADDRESS }}" && -n "${{ secrets.AWS_HOST_USER }}" ]]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi

  # deploy:
  #   name: Deploy to AWS EC2
  #   runs-on: ubuntu-latest
  #   needs: checking-secrets
  #   if: needs.checking-secrets.outputs.secret_key_exists == 'true'
  #   steps:
  #     - name: Checkout main
  #       uses: actions/checkout@v3

  #     - name: Add environment variables to .env
  #       run: |
  #         echo JOBSPRO_IMAGE=${JOBSPRO_IMAGE} >> .env
  #         echo NGINX_IMAGE=${NGINX_IMAGE} >> .env
  #         echo AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID} >> .env
  #         echo AWS_REGION=${AWS_REGION} >> .env

  #     - name: Add the private SSH key to the ssh-agent
  #       env:
  #         SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  #       run: |
  #         mkdir -p ~/.ssh
  #         ssh-agent -a $SSH_AUTH_SOCK > /dev/null
  #         ssh-keyscan github.com >> ~/.ssh/known_hosts
  #         ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

  #     - name: Deploy images on AWS EC2
  #       env:
  #         SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  #         JOBSPRO_IMAGE: ${{ env.JOBSPRO_IMAGE }}
  #         NGINX_IMAGE: ${{ env.NGINX_IMAGE }}
  #         AWS_REGION: ${{ env.AWS_REGION }}
  #         AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}

  #       run: |
  #         scp -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml ${{ secrets.AWS_HOST_USER }}@${{ secrets.AWS_EC2_IP_ADDRESS }}:
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_HOST_USER }}@${{ secrets.AWS_EC2_IP_ADDRESS }} << 'EOF'
  #           export AWS_ACCOUNT_ID=$1
  #           export AWS_REGION=$2
  #           export JOBSPRO_IMAGE=$3
  #           export NGINX_IMAGE=$4

  #           aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

  #           docker pull $JOBSPRO_IMAGE
  #           docker pull $NGINX_IMAGE 

  #           docker-compose --env-file=.env -f docker-compose.prod.yml up -d

  #           docker logout
  #         EOF
