name: Continuous Integration and Delivery

on:
  push:
    branches: [feature/deploy-to-EC2]

env:
  #
  JOBSPRO_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/jobspro-app
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build the Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: checkout feature/deploy-to-EC2
        uses: actions/checkout@v3

      - name: Set environment variables to .env
        run: |
          echo "JOBSPRO_IMAGE=$(echo ${{env.JOBSPRO_IMAGE}} )" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

      - name: Pull images
        run: |
          docker pull ${{ env.JOBSPRO_IMAGE }} || true
      - name: Build images
        run: |
          docker build -t ${{env.JOBSPRO_IMAGE}} .
      - name: Push images
        run: |
          docker push ${{ env.JOBSPRO_IMAGE }}

  checking-secrets:
    name: Checking secrets
    runs-on: ubuntu-latest
    needs: build
    outputs:
      secret_key_exists: ${{steps.check_secrets.outputs.defined}}
    steps:
      - name: Check for Secrets availabilities
        id: check_secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.PRIVATE_KEY }}" && -n "${{secrets.AWS_EC2_IP_ADDRESS}}" && -n "${{secrets.AWS_HOST_USER}}" ]]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: checking-secrets
    if: needs.checking-secrets.outputs.secret_key_exists == 'true'
    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: SSH into EC2 instance and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP_ADDRESS }}
          username: ${{ secrets.AWS_HOST_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            docker pull $JOBSPRO_IMAGE
            docker rm -f jobsproContainer || true
            docker run -d -p 3000:80 --name jobsproContainer $JOBSPRO_IMAGE
      # - name: Add environment variables to .env
      #   run: |
      #     echo JOBSPRO_IMAGE=${{ env.JOBSPRO_IMAGE }} >> .env
      #     echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
      #     echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
      # - name: Add the private SSH key to the ssh-agent
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      #   run: |
      #     mkdir -p ~/.ssh
      #     ssh-agent -a $SSH_AUTH_SOCK > /dev/null
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts
      #     ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"  

      # - name: Deploy images on AWS EC2
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{secrets.AWS_HOST_USER}}@${{ secrets.AWS_EC2_IP_ADDRESS }} << EOF
      #       docker login ghcr.io -u ${{secrets.NAMESPACE}} -p ${{secrets.PERSONAL_ACCESS_TOKEN}}
      #       docker pull $JOBSPRO_IMAGE
      #       docker run -d -p 8080:8080 $JOBSPRO_IMAGE 
      #       docker logout
      #     EOF

        